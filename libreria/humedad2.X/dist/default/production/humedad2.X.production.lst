

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Mar 12 18:30:12 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  008F                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  0105                     	;# 
   203  0107                     	;# 
   204  0108                     	;# 
   205  0109                     	;# 
   206  010C                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0187                     	;# 
   213  0188                     	;# 
   214  0189                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0088                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  0105                     	;# 
   281  0107                     	;# 
   282  0108                     	;# 
   283  0109                     	;# 
   284  010C                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  010F                     	;# 
   289  0185                     	;# 
   290  0187                     	;# 
   291  0188                     	;# 
   292  0189                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295                           
   296                           	psect	idataBANK0
   297  0450                     __pidataBANK0:	
   298                           
   299                           ;initializer for _Humidity
   300  0450  3452               	retlw	82
   301  0451  3448               	retlw	72
   302  0452  3420               	retlw	32
   303  0453  3420               	retlw	32
   304  0454  3420               	retlw	32
   305  0455  343D               	retlw	61
   306  0456  3420               	retlw	32
   307  0457  3430               	retlw	48
   308  0458  3430               	retlw	48
   309  0459  342E               	retlw	46
   310  045A  3430               	retlw	48
   311  045B  3420               	retlw	32
   312  045C  3425               	retlw	37
   313  045D  3420               	retlw	32
   314  045E  3420               	retlw	32
   315  045F  3400               	retlw	0
   316                           
   317                           ;initializer for _Temperature
   318  0460  3454               	retlw	84
   319  0461  3465               	retlw	101
   320  0462  346D               	retlw	109
   321  0463  3470               	retlw	112
   322  0464  3420               	retlw	32
   323  0465  343D               	retlw	61
   324  0466  3420               	retlw	32
   325  0467  3430               	retlw	48
   326  0468  3430               	retlw	48
   327  0469  342E               	retlw	46
   328  046A  3430               	retlw	48
   329  046B  3420               	retlw	32
   330  046C  3443               	retlw	67
   331  046D  3420               	retlw	32
   332  046E  3420               	retlw	32
   333  046F  3400               	retlw	0
   334  0006                     _PORTB	set	6
   335  0008                     _PORTDbits	set	8
   336  0010                     _T1CON	set	16
   337  000E                     _TMR1L	set	14
   338  000F                     _TMR1H	set	15
   339  0080                     _TMR1ON	set	128
   340  0028                     _RA0	set	40
   341  0088                     _TRISD	set	136
   342  0086                     _TRISB	set	134
   343  0428                     _TRISA0	set	1064
   344  0189                     _ANSELH	set	393
   345  0188                     _ANSEL	set	392
   346                           
   347                           	psect	strings
   348  0003                     __pstrings:	
   349  0003                     stringtab:	
   350  0003                     __stringtab:	
   351                           
   352                           ;	String table - string pointers are 1 byte each
   353  0003  1BFF               	btfsc	btemp+1,7
   354  0004  280D               	ljmp	stringcode
   355  0005  1383               	bcf	3,7
   356  0006  187F               	btfsc	btemp+1,0
   357  0007  1783               	bsf	3,7
   358  0008  0800               	movf	0,w
   359  0009  0A84               	incf	4,f
   360  000A  1903               	skipnz
   361  000B  0AFF               	incf	btemp+1,f
   362  000C  0008               	return
   363  000D                     stringcode:	
   364  000D                     stringdir:	
   365  000D  3000               	movlw	high stringdir
   366  000E  008A               	movwf	10
   367  000F  0804               	movf	4,w
   368  0010  0A84               	incf	4,f
   369  0011  0782               	addwf	2,f
   370  0012                     __stringbase:	
   371  0012  3400               	retlw	0
   372  0013                     __end_of__stringtab:	
   373  0013                     STR_3:	
   374  0013  3443               	retlw	67	;'C'
   375  0014  3468               	retlw	104	;'h'
   376  0015  3465               	retlw	101	;'e'
   377  0016  3463               	retlw	99	;'c'
   378  0017  346B               	retlw	107	;'k'
   379  0018  3473               	retlw	115	;'s'
   380  0019  3475               	retlw	117	;'u'
   381  001A  346D               	retlw	109	;'m'
   382  001B  3420               	retlw	32	;' '
   383  001C  3445               	retlw	69	;'E'
   384  001D  3472               	retlw	114	;'r'
   385  001E  3472               	retlw	114	;'r'
   386  001F  346F               	retlw	111	;'o'
   387  0020  3472               	retlw	114	;'r'
   388  0021  3421               	retlw	33	;'!'
   389  0022  3400               	retlw	0
   390  0023                     STR_5:	
   391  0023  3466               	retlw	102	;'f'
   392  0024  3472               	retlw	114	;'r'
   393  0025  346F               	retlw	111	;'o'
   394  0026  346D               	retlw	109	;'m'
   395  0027  3420               	retlw	32	;' '
   396  0028  3474               	retlw	116	;'t'
   397  0029  3468               	retlw	104	;'h'
   398  002A  3465               	retlw	101	;'e'
   399  002B  3420               	retlw	32	;' '
   400  002C  3473               	retlw	115	;'s'
   401  002D  3465               	retlw	101	;'e'
   402  002E  346E               	retlw	110	;'n'
   403  002F  3473               	retlw	115	;'s'
   404  0030  346F               	retlw	111	;'o'
   405  0031  3472               	retlw	114	;'r'
   406  0032  3400               	retlw	0
   407  0033                     STR_4:	
   408  0033  344E               	retlw	78	;'N'
   409  0034  346F               	retlw	111	;'o'
   410  0035  3420               	retlw	32	;' '
   411  0036  3472               	retlw	114	;'r'
   412  0037  3465               	retlw	101	;'e'
   413  0038  3473               	retlw	115	;'s'
   414  0039  3470               	retlw	112	;'p'
   415  003A  346F               	retlw	111	;'o'
   416  003B  346E               	retlw	110	;'n'
   417  003C  3473               	retlw	115	;'s'
   418  003D  3465               	retlw	101	;'e'
   419  003E  3400               	retlw	0
   420  003F                     STR_1:	
   421  003F  3454               	retlw	84	;'T'
   422  0040  3469               	retlw	105	;'i'
   423  0041  346D               	retlw	109	;'m'
   424  0042  3465               	retlw	101	;'e'
   425  0043  3420               	retlw	32	;' '
   426  0044  346F               	retlw	111	;'o'
   427  0045  3475               	retlw	117	;'u'
   428  0046  3474               	retlw	116	;'t'
   429  0047  3421               	retlw	33	;'!'
   430  0048  3400               	retlw	0
   431  0049                     STR_2:	
   432  0049  3468               	retlw	104	;'h'
   433  004A  346F               	retlw	111	;'o'
   434  004B  346C               	retlw	108	;'l'
   435  004C  3461               	retlw	97	;'a'
   436  004D  3400               	retlw	0
   437                           
   438                           ; #config settings
   439  0000                     
   440                           	psect	cinit
   441  07E4                     start_initialization:	
   442  07E4                     __initialization:	
   443                           
   444                           ; Initialize objects allocated to BANK0
   445  07E4  1383               	bcf	3,7	;select IRP bank0
   446  07E5  3040               	movlw	low (__pdataBANK0+32)
   447  07E6  00FD               	movwf	btemp+-1
   448  07E7  3004               	movlw	high __pidataBANK0
   449  07E8  00FE               	movwf	btemp
   450  07E9  3050               	movlw	low __pidataBANK0
   451  07EA  00FF               	movwf	btemp+1
   452  07EB  3020               	movlw	low __pdataBANK0
   453  07EC  0084               	movwf	4
   454  07ED  120A  118A  23FD  120A  118A  	fcall	init_ram0
   455                           
   456                           ; Clear objects allocated to BANK0
   457  07F2  01CA               	clrf	__pbssBANK0& (0+127)
   458  07F3  01CB               	clrf	(__pbssBANK0+1)& (0+127)
   459  07F4  01CC               	clrf	(__pbssBANK0+2)& (0+127)
   460  07F5  01CD               	clrf	(__pbssBANK0+3)& (0+127)
   461  07F6  01CE               	clrf	(__pbssBANK0+4)& (0+127)
   462  07F7  01CF               	clrf	(__pbssBANK0+5)& (0+127)
   463                           
   464                           ; Clear objects allocated to COMMON
   465  07F8  01FA               	clrf	__pbssCOMMON& (0+127)
   466  07F9  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   467  07FA  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   468  07FB  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
   469  07FC                     end_of_initialization:	
   470                           ;End of C runtime variable initialization code
   471                           
   472  07FC                     __end_of__initialization:	
   473  07FC  0183               	clrf	3
   474  07FD  120A  118A  2E50   	ljmp	_main	;jump to C main() function
   475                           
   476                           	psect	bssCOMMON
   477  007A                     __pbssCOMMON:	
   478  007A                     _RH_Byte2:	
   479  007A                     	ds	1
   480  007B                     _RH_Byte1:	
   481  007B                     	ds	1
   482  007C                     _T_Byte2:	
   483  007C                     	ds	1
   484  007D                     _T_Byte1:	
   485  007D                     	ds	1
   486                           
   487                           	psect	bssBANK0
   488  004A                     __pbssBANK0:	
   489  004A                     _humedad:	
   490  004A                     	ds	1
   491  004B                     _resultado:	
   492  004B                     	ds	1
   493  004C                     _u1:	
   494  004C                     	ds	1
   495  004D                     _d1:	
   496  004D                     	ds	1
   497  004E                     _c1:	
   498  004E                     	ds	1
   499  004F                     _CheckSum:	
   500  004F                     	ds	1
   501                           
   502                           	psect	dataBANK0
   503  0020                     __pdataBANK0:	
   504  0020                     _Humidity:	
   505  0020                     	ds	16
   506  0030                     _Temperature:	
   507  0030                     	ds	16
   508                           
   509                           	psect	inittext
   510  03F9                     init_fetch0:	
   511                           ;	Called with low address in FSR and high address in W
   512                           
   513  03F9  087E               	movf	btemp,w
   514  03FA  008A               	movwf	10
   515  03FB  087F               	movf	btemp+1,w
   516  03FC  0082               	movwf	2
   517  03FD                     init_ram0:	
   518                           ;Called with:
   519                           ;	high address of idata address in btemp 
   520                           ;	low address of idata address in btemp+1 
   521                           ;	low address of data in FSR
   522                           ;	high address + 1 of data in btemp-1
   523                           
   524  03FD  120A  118A  23F9  120A  118A  	fcall	init_fetch0
   525  0402  0080               	movwf	0
   526  0403  0A84               	incf	4,f
   527  0404  0804               	movf	4,w
   528  0405  067D               	xorwf	btemp+-1,w
   529  0406  1903               	btfsc	3,2
   530  0407  3400               	retlw	0
   531  0408  0AFF               	incf	btemp+1,f
   532  0409  1903               	btfsc	3,2
   533  040A  0AFE               	incf	btemp,f
   534  040B  2BFD               	goto	init_ram0
   535                           
   536                           	psect	cstackCOMMON
   537  0070                     __pcstackCOMMON:	
   538  0070                     ?_Check_Response:	
   539  0070                     ?_Read_Data:	
   540                           ; 1 bit 
   541                           
   542  0070                     ?_lcd_setup:	
   543                           ; 1 bit 
   544                           
   545  0070                     ?_setup:	
   546                           ; 1 bytes @ 0x0
   547                           
   548  0070                     ?_Start_Signal:	
   549                           ; 1 bytes @ 0x0
   550                           
   551  0070                     ??_Start_Signal:	
   552                           ; 1 bytes @ 0x0
   553                           
   554  0070                     ??_Check_Response:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ??_Read_Data:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ?_main:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_lcd_command:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ??_lcd_command:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_lcd_wchar:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ??_lcd_wchar:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?___awdiv:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?___awmod:	
   579                           ; 2 bytes @ 0x0
   580                           
   581  0070                     ___awdiv@divisor:	
   582                           ; 2 bytes @ 0x0
   583                           
   584  0070                     ___awmod@divisor:	
   585                           ; 2 bytes @ 0x0
   586                           
   587                           
   588                           ; 2 bytes @ 0x0
   589  0070                     	ds	2
   590  0072                     Read_Data@i:	
   591  0072                     lcd_command@a:	
   592                           ; 1 bytes @ 0x2
   593                           
   594  0072                     lcd_wchar@dato:	
   595                           ; 1 bytes @ 0x2
   596                           
   597  0072                     ___awdiv@dividend:	
   598                           ; 1 bytes @ 0x2
   599                           
   600  0072                     ___awmod@dividend:	
   601                           ; 2 bytes @ 0x2
   602                           
   603                           
   604                           ; 2 bytes @ 0x2
   605  0072                     	ds	1
   606  0073                     ??_lcd_setup:	
   607  0073                     ?_lcd_cursor:	
   608                           ; 1 bytes @ 0x3
   609                           
   610  0073                     ?_lcd_wstring:	
   611                           ; 1 bytes @ 0x3
   612                           
   613  0073                     Read_Data@dht_data:	
   614                           ; 1 bytes @ 0x3
   615                           
   616  0073                     lcd_cursor@b:	
   617                           ; 1 bytes @ 0x3
   618                           
   619  0073                     lcd_wstring@string:	
   620                           ; 1 bytes @ 0x3
   621                           
   622                           
   623                           ; 2 bytes @ 0x3
   624  0073                     	ds	1
   625  0074                     ??_lcd_cursor:	
   626  0074                     ??___awdiv:	
   627                           ; 1 bytes @ 0x4
   628                           
   629  0074                     ??___awmod:	
   630                           ; 1 bytes @ 0x4
   631                           
   632                           
   633                           ; 1 bytes @ 0x4
   634  0074                     	ds	1
   635  0075                     ??_lcd_wstring:	
   636  0075                     ??_setup:	
   637                           ; 1 bytes @ 0x5
   638                           
   639  0075                     ___awdiv@counter:	
   640                           ; 1 bytes @ 0x5
   641                           
   642  0075                     ___awmod@counter:	
   643                           ; 1 bytes @ 0x5
   644                           
   645                           
   646                           ; 1 bytes @ 0x5
   647  0075                     	ds	1
   648  0076                     lcd_cursor@a:	
   649  0076                     ___awdiv@sign:	
   650                           ; 1 bytes @ 0x6
   651                           
   652  0076                     ___awmod@sign:	
   653                           ; 1 bytes @ 0x6
   654                           
   655                           
   656                           ; 1 bytes @ 0x6
   657  0076                     	ds	1
   658  0077                     ___awdiv@quotient:	
   659                           
   660                           ; 2 bytes @ 0x7
   661  0077                     	ds	1
   662  0078                     lcd_wstring@i:	
   663                           
   664                           ; 2 bytes @ 0x8
   665  0078                     	ds	2
   666                           
   667                           	psect	cstackBANK0
   668  0040                     __pcstackBANK0:	
   669  0040                     ??_main:	
   670                           
   671                           ; 1 bytes @ 0x0
   672  0040                     	ds	10
   673                           
   674                           	psect	maintext
   675  0650                     __pmaintext:	
   676 ;;
   677 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
   678 ;;
   679 ;; *************** function _main *****************
   680 ;; Defined at:
   681 ;;		line 110 in file "main.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : B00/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   695 ;;      Params:         0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0
   697 ;;      Temps:          0      10       0       0       0
   698 ;;      Totals:         0      10       0       0       0
   699 ;;Total ram usage:       10 bytes
   700 ;; Hardware stack levels required when called:    3
   701 ;; This function calls:
   702 ;;		_Check_Response
   703 ;;		_Read_Data
   704 ;;		_Start_Signal
   705 ;;		___awdiv
   706 ;;		___awmod
   707 ;;		_lcd_cursor
   708 ;;		_lcd_wstring
   709 ;;		_setup
   710 ;; This function is called by:
   711 ;;		Startup code after reset
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           
   716                           ;psect for function _main
   717  0650                     _main:	
   718  0650                     l1261:	
   719                           ;incstack = 0
   720                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   721                           
   722                           
   723                           ;main.c: 112:   ANSEL = 0;
   724  0650  1683               	bsf	3,5	;RP0=1, select bank3
   725  0651  1703               	bsf	3,6	;RP1=1, select bank3
   726  0652  0188               	clrf	8	;volatile
   727                           
   728                           ;main.c: 113:   T1CON = 0x00;
   729  0653  1283               	bcf	3,5	;RP0=0, select bank0
   730  0654  1303               	bcf	3,6	;RP1=0, select bank0
   731  0655  0190               	clrf	16	;volatile
   732                           
   733                           ;main.c: 114:   TMR1H = 0;
   734  0656  018F               	clrf	15	;volatile
   735                           
   736                           ;main.c: 115:   TMR1L = 0;
   737  0657  018E               	clrf	14	;volatile
   738  0658                     l1263:	
   739                           
   740                           ;main.c: 116:   setup();
   741  0658  120A  118A  23F3  120A  118A  	fcall	_setup
   742  065D                     l1265:	
   743                           
   744                           ;main.c: 119:   {;main.c: 120:     Start_Signal();
   745  065D  120A  118A  2435  120A  118A  	fcall	_Start_Signal
   746  0662                     l1267:	
   747                           
   748                           ;main.c: 122:     if(Check_Response())
   749  0662  120A  118A  2493  120A  118A  	fcall	_Check_Response
   750  0667  1C03               	btfss	3,0
   751  0668  2E6A               	goto	u801
   752  0669  2E6B               	goto	u800
   753  066A                     u801:	
   754  066A  2FA9               	goto	l1303
   755  066B                     u800:	
   756  066B                     l1269:	
   757                           
   758                           ;main.c: 123:     {;main.c: 125:       if(Read_Data(&RH_Byte1) || Read_Data(&RH_Byte2) |
      +                          | Read_Data(&T_Byte1) || Read_Data(&T_Byte2) || Read_Data(&CheckSum))
   759  066B  307B               	movlw	(low (_RH_Byte1| 0))& (0+255)
   760  066C  120A  118A  2547  120A  118A  	fcall	_Read_Data
   761  0671  1803               	btfsc	3,0
   762  0672  2E74               	goto	u811
   763  0673  2E75               	goto	u810
   764  0674                     u811:	
   765  0674  2E9D               	goto	l1279
   766  0675                     u810:	
   767  0675                     l1271:	
   768  0675  307A               	movlw	(low (_RH_Byte2| 0))& (0+255)
   769  0676  120A  118A  2547  120A  118A  	fcall	_Read_Data
   770  067B  1803               	btfsc	3,0
   771  067C  2E7E               	goto	u821
   772  067D  2E7F               	goto	u820
   773  067E                     u821:	
   774  067E  2E9D               	goto	l1279
   775  067F                     u820:	
   776  067F                     l1273:	
   777  067F  307D               	movlw	(low (_T_Byte1| 0))& (0+255)
   778  0680  120A  118A  2547  120A  118A  	fcall	_Read_Data
   779  0685  1803               	btfsc	3,0
   780  0686  2E88               	goto	u831
   781  0687  2E89               	goto	u830
   782  0688                     u831:	
   783  0688  2E9D               	goto	l1279
   784  0689                     u830:	
   785  0689                     l1275:	
   786  0689  307C               	movlw	(low (_T_Byte2| 0))& (0+255)
   787  068A  120A  118A  2547  120A  118A  	fcall	_Read_Data
   788  068F  1803               	btfsc	3,0
   789  0690  2E92               	goto	u841
   790  0691  2E93               	goto	u840
   791  0692                     u841:	
   792  0692  2E9D               	goto	l1279
   793  0693                     u840:	
   794  0693                     l1277:	
   795  0693  304F               	movlw	(low (_CheckSum| 0))& (0+255)
   796  0694  120A  118A  2547  120A  118A  	fcall	_Read_Data
   797  0699  1C03               	btfss	3,0
   798  069A  2E9C               	goto	u851
   799  069B  2E9D               	goto	u850
   800  069C                     u851:	
   801  069C  2EB3               	goto	l1283
   802  069D                     u850:	
   803  069D                     l1279:	
   804                           
   805                           ;main.c: 126:       {;main.c: 127:         lcd_cursor(1,5);
   806  069D  3005               	movlw	5
   807  069E  1283               	bcf	3,5	;RP0=0, select bank0
   808  069F  1303               	bcf	3,6	;RP1=0, select bank0
   809  06A0  00C0               	movwf	??_main
   810  06A1  0840               	movf	??_main,w
   811  06A2  00F3               	movwf	lcd_cursor@b
   812  06A3  3001               	movlw	1
   813  06A4  120A  118A  2470  120A  118A  	fcall	_lcd_cursor
   814  06A9                     l1281:	
   815                           
   816                           ;main.c: 128:         lcd_wstring("Time out!");
   817  06A9  302D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   818  06AA  00F3               	movwf	lcd_wstring@string
   819  06AB  3080               	movlw	128
   820  06AC  00F4               	movwf	lcd_wstring@string+1
   821  06AD  120A  118A  24BF  120A  118A  	fcall	_lcd_wstring
   822                           
   823                           ;main.c: 129:       }
   824  06B2  2FCF               	goto	l1309
   825  06B3                     l1283:	
   826                           
   827                           ;main.c: 132:       {;main.c: 133:         if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte
      +                          1 + T_Byte2) & 0xFF))
   828  06B3  087B               	movf	_RH_Byte1,w
   829  06B4  077A               	addwf	_RH_Byte2,w
   830  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   831  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   832  06B7  00C0               	movwf	??_main
   833  06B8  01C1               	clrf	??_main+1
   834  06B9  0DC1               	rlf	??_main+1,f
   835  06BA  087D               	movf	_T_Byte1,w
   836  06BB  0740               	addwf	??_main,w
   837  06BC  00C2               	movwf	??_main+2
   838  06BD  3000               	movlw	0
   839  06BE  1803               	skipnc
   840  06BF  3001               	movlw	1
   841  06C0  0741               	addwf	??_main+1,w
   842  06C1  00C3               	movwf	??_main+3
   843  06C2  087C               	movf	_T_Byte2,w
   844  06C3  0742               	addwf	??_main+2,w
   845  06C4  00C4               	movwf	??_main+4
   846  06C5  3000               	movlw	0
   847  06C6  1803               	skipnc
   848  06C7  3001               	movlw	1
   849  06C8  0743               	addwf	??_main+3,w
   850  06C9  00C5               	movwf	??_main+5
   851  06CA  30FF               	movlw	255
   852  06CB  0544               	andwf	??_main+4,w
   853  06CC  00C6               	movwf	??_main+6
   854  06CD  3000               	movlw	0
   855  06CE  0545               	andwf	??_main+5,w
   856  06CF  00C7               	movwf	??_main+7
   857  06D0  084F               	movf	_CheckSum,w
   858  06D1  00C8               	movwf	??_main+8
   859  06D2  01C9               	clrf	??_main+9
   860  06D3  0847               	movf	??_main+7,w
   861  06D4  0649               	xorwf	??_main+9,w
   862  06D5  1D03               	skipz
   863  06D6  2ED9               	goto	u865
   864  06D7  0846               	movf	??_main+6,w
   865  06D8  0648               	xorwf	??_main+8,w
   866  06D9                     u865:	
   867  06D9  1D03               	skipz
   868  06DA  2EDC               	goto	u861
   869  06DB  2EDD               	goto	u860
   870  06DC                     u861:	
   871  06DC  2F97               	goto	l1299
   872  06DD                     u860:	
   873  06DD                     l1285:	
   874                           
   875                           ;main.c: 134:         {;main.c: 135:           Temperature[7] = T_Byte1 / 10 + '0';
   876  06DD  300A               	movlw	10
   877  06DE  00F0               	movwf	___awdiv@divisor
   878  06DF  3000               	movlw	0
   879  06E0  00F1               	movwf	___awdiv@divisor+1
   880  06E1  087D               	movf	_T_Byte1,w
   881  06E2  00C0               	movwf	??_main
   882  06E3  01C1               	clrf	??_main+1
   883  06E4  0840               	movf	??_main,w
   884  06E5  00F2               	movwf	___awdiv@dividend
   885  06E6  0841               	movf	??_main+1,w
   886  06E7  00F3               	movwf	___awdiv@dividend+1
   887  06E8  120A  118A  25E9  120A  118A  	fcall	___awdiv
   888  06ED  0870               	movf	?___awdiv,w
   889  06EE  3E30               	addlw	48
   890  06EF  1283               	bcf	3,5	;RP0=0, select bank0
   891  06F0  1303               	bcf	3,6	;RP1=0, select bank0
   892  06F1  00C2               	movwf	??_main+2
   893  06F2  0842               	movf	??_main+2,w
   894  06F3  00B7               	movwf	_Temperature+7
   895                           
   896                           ;main.c: 136:           Temperature[8] = T_Byte1 % 10 + '0';
   897  06F4  300A               	movlw	10
   898  06F5  00F0               	movwf	___awmod@divisor
   899  06F6  3000               	movlw	0
   900  06F7  00F1               	movwf	___awmod@divisor+1
   901  06F8  087D               	movf	_T_Byte1,w
   902  06F9  00C0               	movwf	??_main
   903  06FA  01C1               	clrf	??_main+1
   904  06FB  0840               	movf	??_main,w
   905  06FC  00F2               	movwf	___awmod@dividend
   906  06FD  0841               	movf	??_main+1,w
   907  06FE  00F3               	movwf	___awmod@dividend+1
   908  06FF  120A  118A  2590  120A  118A  	fcall	___awmod
   909  0704  0870               	movf	?___awmod,w
   910  0705  3E30               	addlw	48
   911  0706  1283               	bcf	3,5	;RP0=0, select bank0
   912  0707  1303               	bcf	3,6	;RP1=0, select bank0
   913  0708  00C2               	movwf	??_main+2
   914  0709  0842               	movf	??_main+2,w
   915  070A  00B8               	movwf	_Temperature+8
   916                           
   917                           ;main.c: 137:           Temperature[10] = T_Byte2 / 10 + '0';
   918  070B  300A               	movlw	10
   919  070C  00F0               	movwf	___awdiv@divisor
   920  070D  3000               	movlw	0
   921  070E  00F1               	movwf	___awdiv@divisor+1
   922  070F  087C               	movf	_T_Byte2,w
   923  0710  00C0               	movwf	??_main
   924  0711  01C1               	clrf	??_main+1
   925  0712  0840               	movf	??_main,w
   926  0713  00F2               	movwf	___awdiv@dividend
   927  0714  0841               	movf	??_main+1,w
   928  0715  00F3               	movwf	___awdiv@dividend+1
   929  0716  120A  118A  25E9  120A  118A  	fcall	___awdiv
   930  071B  0870               	movf	?___awdiv,w
   931  071C  3E30               	addlw	48
   932  071D  1283               	bcf	3,5	;RP0=0, select bank0
   933  071E  1303               	bcf	3,6	;RP1=0, select bank0
   934  071F  00C2               	movwf	??_main+2
   935  0720  0842               	movf	??_main+2,w
   936  0721  00BA               	movwf	_Temperature+10
   937                           
   938                           ;main.c: 138:           Humidity[7] = RH_Byte1 / 10 + '0';
   939  0722  300A               	movlw	10
   940  0723  00F0               	movwf	___awdiv@divisor
   941  0724  3000               	movlw	0
   942  0725  00F1               	movwf	___awdiv@divisor+1
   943  0726  087B               	movf	_RH_Byte1,w
   944  0727  00C0               	movwf	??_main
   945  0728  01C1               	clrf	??_main+1
   946  0729  0840               	movf	??_main,w
   947  072A  00F2               	movwf	___awdiv@dividend
   948  072B  0841               	movf	??_main+1,w
   949  072C  00F3               	movwf	___awdiv@dividend+1
   950  072D  120A  118A  25E9  120A  118A  	fcall	___awdiv
   951  0732  0870               	movf	?___awdiv,w
   952  0733  3E30               	addlw	48
   953  0734  1283               	bcf	3,5	;RP0=0, select bank0
   954  0735  1303               	bcf	3,6	;RP1=0, select bank0
   955  0736  00C2               	movwf	??_main+2
   956  0737  0842               	movf	??_main+2,w
   957  0738  00A7               	movwf	_Humidity+7
   958                           
   959                           ;main.c: 139:           Humidity[8] = RH_Byte1 % 10 + '0';
   960  0739  300A               	movlw	10
   961  073A  00F0               	movwf	___awmod@divisor
   962  073B  3000               	movlw	0
   963  073C  00F1               	movwf	___awmod@divisor+1
   964  073D  087B               	movf	_RH_Byte1,w
   965  073E  00C0               	movwf	??_main
   966  073F  01C1               	clrf	??_main+1
   967  0740  0840               	movf	??_main,w
   968  0741  00F2               	movwf	___awmod@dividend
   969  0742  0841               	movf	??_main+1,w
   970  0743  00F3               	movwf	___awmod@dividend+1
   971  0744  120A  118A  2590  120A  118A  	fcall	___awmod
   972  0749  0870               	movf	?___awmod,w
   973  074A  3E30               	addlw	48
   974  074B  1283               	bcf	3,5	;RP0=0, select bank0
   975  074C  1303               	bcf	3,6	;RP1=0, select bank0
   976  074D  00C2               	movwf	??_main+2
   977  074E  0842               	movf	??_main+2,w
   978  074F  00A8               	movwf	_Humidity+8
   979                           
   980                           ;main.c: 140:           Humidity[10] = RH_Byte2 / 10 + '0';
   981  0750  300A               	movlw	10
   982  0751  00F0               	movwf	___awdiv@divisor
   983  0752  3000               	movlw	0
   984  0753  00F1               	movwf	___awdiv@divisor+1
   985  0754  087A               	movf	_RH_Byte2,w
   986  0755  00C0               	movwf	??_main
   987  0756  01C1               	clrf	??_main+1
   988  0757  0840               	movf	??_main,w
   989  0758  00F2               	movwf	___awdiv@dividend
   990  0759  0841               	movf	??_main+1,w
   991  075A  00F3               	movwf	___awdiv@dividend+1
   992  075B  120A  118A  25E9  120A  118A  	fcall	___awdiv
   993  0760  0870               	movf	?___awdiv,w
   994  0761  3E30               	addlw	48
   995  0762  1283               	bcf	3,5	;RP0=0, select bank0
   996  0763  1303               	bcf	3,6	;RP1=0, select bank0
   997  0764  00C2               	movwf	??_main+2
   998  0765  0842               	movf	??_main+2,w
   999  0766  00AA               	movwf	_Humidity+10
  1000  0767                     l1287:	
  1001                           
  1002                           ;main.c: 141:           Temperature[11] = 223;
  1003  0767  30DF               	movlw	223
  1004  0768  00C0               	movwf	??_main
  1005  0769  0840               	movf	??_main,w
  1006  076A  00BB               	movwf	_Temperature+11
  1007  076B                     l1289:	
  1008                           
  1009                           ;main.c: 142:           lcd_cursor(1, 1);
  1010  076B  01F3               	clrf	lcd_cursor@b
  1011  076C  0AF3               	incf	lcd_cursor@b,f
  1012  076D  3001               	movlw	1
  1013  076E  120A  118A  2470  120A  118A  	fcall	_lcd_cursor
  1014  0773                     l1291:	
  1015                           
  1016                           ;main.c: 143:           lcd_wstring("hola");
  1017  0773  3037               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1018  0774  00F3               	movwf	lcd_wstring@string
  1019  0775  3080               	movlw	128
  1020  0776  00F4               	movwf	lcd_wstring@string+1
  1021  0777  120A  118A  24BF  120A  118A  	fcall	_lcd_wstring
  1022  077C                     l1293:	
  1023                           
  1024                           ;main.c: 144:           lcd_wstring(Temperature);
  1025  077C  3030               	movlw	(low (_Temperature| 0))& (0+255)
  1026  077D  00F3               	movwf	lcd_wstring@string
  1027  077E  3000               	movlw	0
  1028  077F  00F4               	movwf	lcd_wstring@string+1
  1029  0780  120A  118A  24BF  120A  118A  	fcall	_lcd_wstring
  1030  0785                     l1295:	
  1031                           
  1032                           ;main.c: 145:           lcd_cursor(2,1);
  1033  0785  01F3               	clrf	lcd_cursor@b
  1034  0786  0AF3               	incf	lcd_cursor@b,f
  1035  0787  3002               	movlw	2
  1036  0788  120A  118A  2470  120A  118A  	fcall	_lcd_cursor
  1037  078D                     l1297:	
  1038                           
  1039                           ;main.c: 146:           lcd_wstring(Humidity);
  1040  078D  3020               	movlw	(low (_Humidity| 0))& (0+255)
  1041  078E  00F3               	movwf	lcd_wstring@string
  1042  078F  3000               	movlw	0
  1043  0790  00F4               	movwf	lcd_wstring@string+1
  1044  0791  120A  118A  24BF  120A  118A  	fcall	_lcd_wstring
  1045                           
  1046                           ;main.c: 147:         }
  1047  0796  2FCF               	goto	l1309
  1048  0797                     l1299:	
  1049                           
  1050                           ;main.c: 151:         {;main.c: 152:           lcd_cursor(1, 1);
  1051  0797  01F3               	clrf	lcd_cursor@b
  1052  0798  0AF3               	incf	lcd_cursor@b,f
  1053  0799  3001               	movlw	1
  1054  079A  120A  118A  2470  120A  118A  	fcall	_lcd_cursor
  1055  079F                     l1301:	
  1056                           
  1057                           ;main.c: 153:           lcd_wstring("Checksum Error!");
  1058  079F  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1059  07A0  00F3               	movwf	lcd_wstring@string
  1060  07A1  3080               	movlw	128
  1061  07A2  00F4               	movwf	lcd_wstring@string+1
  1062  07A3  120A  118A  24BF  120A  118A  	fcall	_lcd_wstring
  1063  07A8  2FCF               	goto	l1309
  1064  07A9                     l1303:	
  1065                           
  1066                           ;main.c: 161:     {;main.c: 162:       lcd_cursor(1,3);
  1067  07A9  3003               	movlw	3
  1068  07AA  1283               	bcf	3,5	;RP0=0, select bank0
  1069  07AB  1303               	bcf	3,6	;RP1=0, select bank0
  1070  07AC  00C0               	movwf	??_main
  1071  07AD  0840               	movf	??_main,w
  1072  07AE  00F3               	movwf	lcd_cursor@b
  1073  07AF  3001               	movlw	1
  1074  07B0  120A  118A  2470  120A  118A  	fcall	_lcd_cursor
  1075  07B5                     l1305:	
  1076                           
  1077                           ;main.c: 163:       lcd_wstring("No response");
  1078  07B5  3021               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1079  07B6  00F3               	movwf	lcd_wstring@string
  1080  07B7  3080               	movlw	128
  1081  07B8  00F4               	movwf	lcd_wstring@string+1
  1082  07B9  120A  118A  24BF  120A  118A  	fcall	_lcd_wstring
  1083  07BE                     l1307:	
  1084                           
  1085                           ;main.c: 164:       lcd_cursor(2,1);
  1086  07BE  01F3               	clrf	lcd_cursor@b
  1087  07BF  0AF3               	incf	lcd_cursor@b,f
  1088  07C0  3002               	movlw	2
  1089  07C1  120A  118A  2470  120A  118A  	fcall	_lcd_cursor
  1090                           
  1091                           ;main.c: 165:       lcd_wstring("from the sensor");
  1092  07C6  3011               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1093  07C7  00F3               	movwf	lcd_wstring@string
  1094  07C8  3080               	movlw	128
  1095  07C9  00F4               	movwf	lcd_wstring@string+1
  1096  07CA  120A  118A  24BF  120A  118A  	fcall	_lcd_wstring
  1097  07CF                     l1309:	
  1098                           
  1099                           ;main.c: 168:     TMR1ON = 0;
  1100  07CF  1283               	bcf	3,5	;RP0=0, select bank0
  1101  07D0  1303               	bcf	3,6	;RP1=0, select bank0
  1102  07D1  1010               	bcf	16,0	;volatile
  1103  07D2                     l1311:	
  1104                           
  1105                           ;main.c: 169:     _delay((unsigned long)((1000)*(4000000/4000.0)));
  1106  07D2  3006               	movlw	6
  1107  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  1108  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  1109  07D5  00C2               	movwf	??_main+2
  1110  07D6  3013               	movlw	19
  1111  07D7  00C1               	movwf	??_main+1
  1112  07D8  30AD               	movlw	173
  1113  07D9  00C0               	movwf	??_main
  1114  07DA                     u897:	
  1115  07DA  0BC0               	decfsz	??_main,f
  1116  07DB  2FDA               	goto	u897
  1117  07DC  0BC1               	decfsz	??_main+1,f
  1118  07DD  2FDA               	goto	u897
  1119  07DE  0BC2               	decfsz	??_main+2,f
  1120  07DF  2FDA               	goto	u897
  1121  07E0  2E5D               	goto	l1265
  1122  07E1  120A  118A  2800   	ljmp	start
  1123  07E4                     __end_of_main:	
  1124                           
  1125                           	psect	text1
  1126  03F3                     __ptext1:	
  1127 ;; *************** function _setup *****************
  1128 ;; Defined at:
  1129 ;;		line 39 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, status,2, status,0, pclath, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1143 ;;      Params:         0       0       0       0       0
  1144 ;;      Locals:         0       0       0       0       0
  1145 ;;      Temps:          0       0       0       0       0
  1146 ;;      Totals:         0       0       0       0       0
  1147 ;;Total ram usage:        0 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    2
  1150 ;; This function calls:
  1151 ;;		_lcd_setup
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           
  1158                           ;psect for function _setup
  1159  03F3                     _setup:	
  1160  03F3                     l1081:	
  1161                           ;incstack = 0
  1162                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1163                           
  1164                           
  1165                           ;main.c: 40:     lcd_setup();
  1166  03F3  120A  118A  2501  120A  118A  	fcall	_lcd_setup
  1167  03F8                     l49:	
  1168  03F8  0008               	return
  1169  03F9                     __end_of_setup:	
  1170                           
  1171                           	psect	text2
  1172  0501                     __ptext2:	
  1173 ;; *************** function _lcd_setup *****************
  1174 ;; Defined at:
  1175 ;;		line 66 in file "LCD.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;		None
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;		None
  1180 ;; Return value:  Size  Location     Type
  1181 ;;                  1    wreg      void 
  1182 ;; Registers used:
  1183 ;;		wreg, status,2, status,0, pclath, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1189 ;;      Params:         0       0       0       0       0
  1190 ;;      Locals:         0       0       0       0       0
  1191 ;;      Temps:          2       0       0       0       0
  1192 ;;      Totals:         2       0       0       0       0
  1193 ;;Total ram usage:        2 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    1
  1196 ;; This function calls:
  1197 ;;		_lcd_command
  1198 ;; This function is called by:
  1199 ;;		_setup
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           
  1204                           ;psect for function _lcd_setup
  1205  0501                     _lcd_setup:	
  1206  0501                     l1051:	
  1207                           ;incstack = 0
  1208                           ; Regs used in _lcd_setup: [wreg+status,2+status,0+pclath+cstack]
  1209                           
  1210                           
  1211                           ;LCD.c: 67:     TRISB = 0x00;
  1212  0501  1683               	bsf	3,5	;RP0=1, select bank1
  1213  0502  1303               	bcf	3,6	;RP1=0, select bank1
  1214  0503  0186               	clrf	6	;volatile
  1215                           
  1216                           ;LCD.c: 68:     ANSELH = 0x00;
  1217  0504  1683               	bsf	3,5	;RP0=1, select bank3
  1218  0505  1703               	bsf	3,6	;RP1=1, select bank3
  1219  0506  0189               	clrf	9	;volatile
  1220                           
  1221                           ;LCD.c: 69:     TRISD = 0x00;
  1222  0507  1683               	bsf	3,5	;RP0=1, select bank1
  1223  0508  1303               	bcf	3,6	;RP1=0, select bank1
  1224  0509  0188               	clrf	8	;volatile
  1225  050A                     l1053:	
  1226                           
  1227                           ;LCD.c: 70:     _delay((unsigned long)((16)*(4000000/4000.0)));
  1228  050A  3015               	movlw	21
  1229  050B  00F4               	movwf	??_lcd_setup+1
  1230  050C  30C6               	movlw	198
  1231  050D  00F3               	movwf	??_lcd_setup
  1232  050E                     u907:	
  1233  050E  0BF3               	decfsz	??_lcd_setup,f
  1234  050F  2D0E               	goto	u907
  1235  0510  0BF4               	decfsz	??_lcd_setup+1,f
  1236  0511  2D0E               	goto	u907
  1237  0512  0000               	nop
  1238  0513                     l1055:	
  1239                           
  1240                           ;LCD.c: 71:     lcd_command(0x03);
  1241  0513  3003               	movlw	3
  1242  0514  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1243  0519                     l1057:	
  1244                           
  1245                           ;LCD.c: 72:     _delay((unsigned long)((4.2)*(4000000/4000.0)));
  1246  0519  3006               	movlw	6
  1247  051A  00F4               	movwf	??_lcd_setup+1
  1248  051B  3073               	movlw	115
  1249  051C  00F3               	movwf	??_lcd_setup
  1250  051D                     u917:	
  1251  051D  0BF3               	decfsz	??_lcd_setup,f
  1252  051E  2D1D               	goto	u917
  1253  051F  0BF4               	decfsz	??_lcd_setup+1,f
  1254  0520  2D1D               	goto	u917
  1255  0521                     l1059:	
  1256                           
  1257                           ;LCD.c: 73:     lcd_command(0x03);
  1258  0521  3003               	movlw	3
  1259  0522  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1260  0527                     l1061:	
  1261                           
  1262                           ;LCD.c: 74:     _delay((unsigned long)((1)*(4000000/4000.0)));
  1263  0527  30C7               	movlw	199
  1264  0528  00F3               	movwf	??_lcd_setup
  1265  0529                     u927:	
  1266  0529  2D2A               	nop2
  1267  052A  0BF3               	decfsz	??_lcd_setup,f
  1268  052B  2D29               	goto	u927
  1269  052C  2D2D               	nop2
  1270  052D  2D2E               	nop2
  1271  052E                     l1063:	
  1272                           
  1273                           ;LCD.c: 75:     lcd_command(0x03);
  1274  052E  3003               	movlw	3
  1275  052F  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1276  0534                     l1065:	
  1277                           
  1278                           ;LCD.c: 76:     lcd_command(0x38);
  1279  0534  3038               	movlw	56
  1280  0535  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1281  053A                     l1067:	
  1282                           
  1283                           ;LCD.c: 77:     lcd_command(0x0C);
  1284  053A  300C               	movlw	12
  1285  053B  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1286  0540                     l1069:	
  1287                           
  1288                           ;LCD.c: 78:     lcd_command(0x06);
  1289  0540  3006               	movlw	6
  1290  0541  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1291  0546                     l145:	
  1292  0546  0008               	return
  1293  0547                     __end_of_lcd_setup:	
  1294                           
  1295                           	psect	text3
  1296  04BF                     __ptext3:	
  1297 ;; *************** function _lcd_wstring *****************
  1298 ;; Defined at:
  1299 ;;		line 59 in file "LCD.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  string          2    3[COMMON] PTR unsigned char 
  1302 ;;		 -> STR_5(16), STR_4(12), STR_3(16), STR_2(5), 
  1303 ;;		 -> Humidity(16), Temperature(16), STR_1(10), 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  i               2    8[COMMON] int 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1315 ;;      Params:         2       0       0       0       0
  1316 ;;      Locals:         2       0       0       0       0
  1317 ;;      Temps:          3       0       0       0       0
  1318 ;;      Totals:         7       0       0       0       0
  1319 ;;Total ram usage:        7 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    1
  1322 ;; This function calls:
  1323 ;;		_lcd_wchar
  1324 ;; This function is called by:
  1325 ;;		_main
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           
  1330                           ;psect for function _lcd_wstring
  1331  04BF                     _lcd_wstring:	
  1332  04BF                     l1171:	
  1333                           ;incstack = 0
  1334                           ; Regs used in _lcd_wstring: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1335                           
  1336                           
  1337                           ;LCD.c: 60:     int i;;LCD.c: 61:     for(i = 0; string[i] != '\0'; i++)
  1338  04BF  01F8               	clrf	lcd_wstring@i
  1339  04C0  01F9               	clrf	lcd_wstring@i+1
  1340  04C1  2CE4               	goto	l1177
  1341  04C2                     l1173:	
  1342                           
  1343                           ;LCD.c: 62:         lcd_wchar(string[i]);
  1344  04C2  0878               	movf	lcd_wstring@i,w
  1345  04C3  0773               	addwf	lcd_wstring@string,w
  1346  04C4  00F6               	movwf	??_lcd_wstring+1
  1347  04C5  0874               	movf	lcd_wstring@string+1,w
  1348  04C6  00F5               	movwf	??_lcd_wstring
  1349  04C7  1803               	skipnc
  1350  04C8  0AF5               	incf	??_lcd_wstring,f
  1351  04C9  1FF8               	btfss	lcd_wstring@i,7
  1352  04CA  2CCC               	goto	u580
  1353  04CB  03F5               	decf	??_lcd_wstring,f
  1354  04CC                     u580:	
  1355  04CC  0875               	movf	??_lcd_wstring,w
  1356  04CD  00F7               	movwf	??_lcd_wstring+2
  1357  04CE  0877               	movf	??_lcd_wstring+2,w
  1358  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  1359  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  1360  04D1  00FF               	movwf	btemp+1
  1361  04D2  0876               	movf	??_lcd_wstring+1,w
  1362  04D3  0084               	movwf	4
  1363  04D4  120A  118A  2003  120A  118A  	fcall	stringtab
  1364  04D9  120A  118A  240C  120A  118A  	fcall	_lcd_wchar
  1365  04DE                     l1175:	
  1366  04DE  3001               	movlw	1
  1367  04DF  07F8               	addwf	lcd_wstring@i,f
  1368  04E0  1803               	skipnc
  1369  04E1  0AF9               	incf	lcd_wstring@i+1,f
  1370  04E2  3000               	movlw	0
  1371  04E3  07F9               	addwf	lcd_wstring@i+1,f
  1372  04E4                     l1177:	
  1373  04E4  0878               	movf	lcd_wstring@i,w
  1374  04E5  0773               	addwf	lcd_wstring@string,w
  1375  04E6  00F6               	movwf	??_lcd_wstring+1
  1376  04E7  0874               	movf	lcd_wstring@string+1,w
  1377  04E8  00F5               	movwf	??_lcd_wstring
  1378  04E9  1803               	skipnc
  1379  04EA  0AF5               	incf	??_lcd_wstring,f
  1380  04EB  1FF8               	btfss	lcd_wstring@i,7
  1381  04EC  2CEE               	goto	u590
  1382  04ED  03F5               	decf	??_lcd_wstring,f
  1383  04EE                     u590:	
  1384  04EE  0875               	movf	??_lcd_wstring,w
  1385  04EF  00F7               	movwf	??_lcd_wstring+2
  1386  04F0  0877               	movf	??_lcd_wstring+2,w
  1387  04F1  1283               	bcf	3,5	;RP0=0, select bank0
  1388  04F2  1303               	bcf	3,6	;RP1=0, select bank0
  1389  04F3  00FF               	movwf	btemp+1
  1390  04F4  0876               	movf	??_lcd_wstring+1,w
  1391  04F5  0084               	movwf	4
  1392  04F6  120A  118A  2003  120A  118A  	fcall	stringtab
  1393  04FB  3A00               	xorlw	0
  1394  04FC  1D03               	skipz
  1395  04FD  2CFF               	goto	u601
  1396  04FE  2D00               	goto	u600
  1397  04FF                     u601:	
  1398  04FF  2CC2               	goto	l1173
  1399  0500                     u600:	
  1400  0500                     l142:	
  1401  0500  0008               	return
  1402  0501                     __end_of_lcd_wstring:	
  1403                           
  1404                           	psect	text4
  1405  040C                     __ptext4:	
  1406 ;; *************** function _lcd_wchar *****************
  1407 ;; Defined at:
  1408 ;;		line 50 in file "LCD.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;  dato            1    wreg     unsigned char 
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;  dato            1    2[COMMON] unsigned char 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1422 ;;      Params:         0       0       0       0       0
  1423 ;;      Locals:         1       0       0       0       0
  1424 ;;      Temps:          2       0       0       0       0
  1425 ;;      Totals:         3       0       0       0       0
  1426 ;;Total ram usage:        3 bytes
  1427 ;; Hardware stack levels used:    1
  1428 ;; This function calls:
  1429 ;;		Nothing
  1430 ;; This function is called by:
  1431 ;;		_lcd_wstring
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           
  1436                           ;psect for function _lcd_wchar
  1437  040C                     _lcd_wchar:	
  1438                           
  1439                           ;incstack = 0
  1440                           ; Regs used in _lcd_wchar: [wreg]
  1441                           ;lcd_wchar@dato stored from wreg
  1442  040C  00F2               	movwf	lcd_wchar@dato
  1443  040D                     l1071:	
  1444                           
  1445                           ;LCD.c: 51:     PORTDbits.RD7 = 1;
  1446  040D  1283               	bcf	3,5	;RP0=0, select bank0
  1447  040E  1303               	bcf	3,6	;RP1=0, select bank0
  1448  040F  1788               	bsf	8,7	;volatile
  1449  0410                     l1073:	
  1450                           
  1451                           ;LCD.c: 52:     PORTB = dato;
  1452  0410  0872               	movf	lcd_wchar@dato,w
  1453  0411  0086               	movwf	6	;volatile
  1454  0412                     l1075:	
  1455                           
  1456                           ;LCD.c: 53:     PORTDbits.RD5 = 1;
  1457  0412  1688               	bsf	8,5	;volatile
  1458                           
  1459                           ;LCD.c: 54:     _delay((unsigned long)((4)*(4000000/4000.0)));
  1460  0413  3006               	movlw	6
  1461  0414  00F1               	movwf	??_lcd_wchar+1
  1462  0415  3030               	movlw	48
  1463  0416  00F0               	movwf	??_lcd_wchar
  1464  0417                     u937:	
  1465  0417  0BF0               	decfsz	??_lcd_wchar,f
  1466  0418  2C17               	goto	u937
  1467  0419  0BF1               	decfsz	??_lcd_wchar+1,f
  1468  041A  2C17               	goto	u937
  1469  041B  0000               	nop
  1470  041C                     l1077:	
  1471                           
  1472                           ;LCD.c: 55:     PORTDbits.RD5 = 0;
  1473  041C  1283               	bcf	3,5	;RP0=0, select bank0
  1474  041D  1303               	bcf	3,6	;RP1=0, select bank0
  1475  041E  1288               	bcf	8,5	;volatile
  1476  041F                     l136:	
  1477  041F  0008               	return
  1478  0420                     __end_of_lcd_wchar:	
  1479                           
  1480                           	psect	text5
  1481  0470                     __ptext5:	
  1482 ;; *************** function _lcd_cursor *****************
  1483 ;; Defined at:
  1484 ;;		line 24 in file "LCD.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  a               1    wreg     unsigned char 
  1487 ;;  b               1    3[COMMON] unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  a               1    6[COMMON] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1499 ;;      Params:         1       0       0       0       0
  1500 ;;      Locals:         1       0       0       0       0
  1501 ;;      Temps:          2       0       0       0       0
  1502 ;;      Totals:         4       0       0       0       0
  1503 ;;Total ram usage:        4 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    1
  1506 ;; This function calls:
  1507 ;;		_lcd_command
  1508 ;; This function is called by:
  1509 ;;		_main
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           
  1514                           ;psect for function _lcd_cursor
  1515  0470                     _lcd_cursor:	
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _lcd_cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1519                           ;lcd_cursor@a stored from wreg
  1520  0470  00F6               	movwf	lcd_cursor@a
  1521  0471                     l1157:	
  1522                           
  1523                           ;LCD.c: 25:     switch(a){
  1524  0471  2C82               	goto	l1165
  1525  0472                     l1159:	
  1526                           
  1527                           ;LCD.c: 27:             lcd_command(0x80+b-1);
  1528  0472  0873               	movf	lcd_cursor@b,w
  1529  0473  3E7F               	addlw	127
  1530  0474  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1531                           
  1532                           ;LCD.c: 28:             break;
  1533  0479  2C92               	goto	l121
  1534  047A                     l1161:	
  1535                           
  1536                           ;LCD.c: 30:             lcd_command(0xC0+b-1);
  1537  047A  0873               	movf	lcd_cursor@b,w
  1538  047B  3EBF               	addlw	191
  1539  047C  120A  118A  2420  120A  118A  	fcall	_lcd_command
  1540                           
  1541                           ;LCD.c: 31:             break;
  1542  0481  2C92               	goto	l121
  1543  0482                     l1165:	
  1544  0482  0876               	movf	lcd_cursor@a,w
  1545  0483  00F4               	movwf	??_lcd_cursor
  1546  0484  01F5               	clrf	??_lcd_cursor+1
  1547                           
  1548                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1549                           ; Switch size 1, requested type "simple"
  1550                           ; Number of cases is 1, Range of values is 0 to 0
  1551                           ; switch strategies available:
  1552                           ; Name         Instructions Cycles
  1553                           ; simple_byte            4     3 (average)
  1554                           ; direct_byte           11     8 (fixed)
  1555                           ; jumptable            260     6 (fixed)
  1556                           ;	Chosen strategy is simple_byte
  1557  0485  0875               	movf	??_lcd_cursor+1,w
  1558  0486  3A00               	xorlw	0	; case 0
  1559  0487  1903               	skipnz
  1560  0488  2C8A               	goto	l1349
  1561  0489  2C92               	goto	l121
  1562  048A                     l1349:	
  1563                           
  1564                           ; Switch size 1, requested type "simple"
  1565                           ; Number of cases is 2, Range of values is 1 to 2
  1566                           ; switch strategies available:
  1567                           ; Name         Instructions Cycles
  1568                           ; simple_byte            7     4 (average)
  1569                           ; direct_byte           17    11 (fixed)
  1570                           ; jumptable            263     9 (fixed)
  1571                           ;	Chosen strategy is simple_byte
  1572  048A  0874               	movf	??_lcd_cursor,w
  1573  048B  3A01               	xorlw	1	; case 1
  1574  048C  1903               	skipnz
  1575  048D  2C72               	goto	l1159
  1576  048E  3A03               	xorlw	3	; case 2
  1577  048F  1903               	skipnz
  1578  0490  2C7A               	goto	l1161
  1579  0491  2C92               	goto	l121
  1580  0492                     l121:	
  1581  0492  0008               	return
  1582  0493                     __end_of_lcd_cursor:	
  1583                           
  1584                           	psect	text6
  1585  0420                     __ptext6:	
  1586 ;; *************** function _lcd_command *****************
  1587 ;; Defined at:
  1588 ;;		line 16 in file "LCD.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  a               1    wreg     unsigned char 
  1591 ;; Auto vars:     Size  Location     Type
  1592 ;;  a               1    2[COMMON] unsigned char 
  1593 ;; Return value:  Size  Location     Type
  1594 ;;                  1    wreg      void 
  1595 ;; Registers used:
  1596 ;;		wreg
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1602 ;;      Params:         0       0       0       0       0
  1603 ;;      Locals:         1       0       0       0       0
  1604 ;;      Temps:          2       0       0       0       0
  1605 ;;      Totals:         3       0       0       0       0
  1606 ;;Total ram usage:        3 bytes
  1607 ;; Hardware stack levels used:    1
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_lcd_cursor
  1612 ;;		_lcd_setup
  1613 ;;		_r_shift
  1614 ;;		_l_shift
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           
  1619                           ;psect for function _lcd_command
  1620  0420                     _lcd_command:	
  1621                           
  1622                           ;incstack = 0
  1623                           ; Regs used in _lcd_command: [wreg]
  1624                           ;lcd_command@a stored from wreg
  1625  0420  00F2               	movwf	lcd_command@a
  1626  0421                     l1043:	
  1627                           
  1628                           ;LCD.c: 17:     PORTDbits.RD7 = PORTDbits.RD6 = 0;
  1629  0421  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0422  1303               	bcf	3,6	;RP1=0, select bank0
  1631  0423  1308               	bcf	8,6	;volatile
  1632  0424  1388               	bcf	8,7	;volatile
  1633  0425                     l1045:	
  1634                           
  1635                           ;LCD.c: 18:     PORTB = a;
  1636  0425  0872               	movf	lcd_command@a,w
  1637  0426  0086               	movwf	6	;volatile
  1638  0427                     l1047:	
  1639                           
  1640                           ;LCD.c: 19:     PORTDbits.RD5=1;
  1641  0427  1688               	bsf	8,5	;volatile
  1642                           
  1643                           ;LCD.c: 20:     _delay((unsigned long)((4)*(4000000/4000.0)));
  1644  0428  3006               	movlw	6
  1645  0429  00F1               	movwf	??_lcd_command+1
  1646  042A  3030               	movlw	48
  1647  042B  00F0               	movwf	??_lcd_command
  1648  042C                     u947:	
  1649  042C  0BF0               	decfsz	??_lcd_command,f
  1650  042D  2C2C               	goto	u947
  1651  042E  0BF1               	decfsz	??_lcd_command+1,f
  1652  042F  2C2C               	goto	u947
  1653  0430  0000               	nop
  1654  0431                     l1049:	
  1655                           
  1656                           ;LCD.c: 21:     PORTDbits.RD5=0;
  1657  0431  1283               	bcf	3,5	;RP0=0, select bank0
  1658  0432  1303               	bcf	3,6	;RP1=0, select bank0
  1659  0433  1288               	bcf	8,5	;volatile
  1660  0434                     l114:	
  1661  0434  0008               	return
  1662  0435                     __end_of_lcd_command:	
  1663                           
  1664                           	psect	text7
  1665  0590                     __ptext7:	
  1666 ;; *************** function ___awmod *****************
  1667 ;; Defined at:
  1668 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;  divisor         2    0[COMMON] int 
  1671 ;;  dividend        2    2[COMMON] int 
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  sign            1    6[COMMON] unsigned char 
  1674 ;;  counter         1    5[COMMON] unsigned char 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  2    0[COMMON] int 
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1684 ;;      Params:         4       0       0       0       0
  1685 ;;      Locals:         2       0       0       0       0
  1686 ;;      Temps:          1       0       0       0       0
  1687 ;;      Totals:         7       0       0       0       0
  1688 ;;Total ram usage:        7 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696                           
  1697                           
  1698                           ;psect for function ___awmod
  1699  0590                     ___awmod:	
  1700  0590                     l1223:	
  1701                           ;incstack = 0
  1702                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1703                           
  1704  0590  01F6               	clrf	___awmod@sign
  1705  0591                     l1225:	
  1706  0591  1FF3               	btfss	___awmod@dividend+1,7
  1707  0592  2D94               	goto	u711
  1708  0593  2D95               	goto	u710
  1709  0594                     u711:	
  1710  0594  2D9C               	goto	l1231
  1711  0595                     u710:	
  1712  0595                     l1227:	
  1713  0595  09F2               	comf	___awmod@dividend,f
  1714  0596  09F3               	comf	___awmod@dividend+1,f
  1715  0597  0AF2               	incf	___awmod@dividend,f
  1716  0598  1903               	skipnz
  1717  0599  0AF3               	incf	___awmod@dividend+1,f
  1718  059A                     l1229:	
  1719  059A  01F6               	clrf	___awmod@sign
  1720  059B  0AF6               	incf	___awmod@sign,f
  1721  059C                     l1231:	
  1722  059C  1FF1               	btfss	___awmod@divisor+1,7
  1723  059D  2D9F               	goto	u721
  1724  059E  2DA0               	goto	u720
  1725  059F                     u721:	
  1726  059F  2DA5               	goto	l1235
  1727  05A0                     u720:	
  1728  05A0                     l1233:	
  1729  05A0  09F0               	comf	___awmod@divisor,f
  1730  05A1  09F1               	comf	___awmod@divisor+1,f
  1731  05A2  0AF0               	incf	___awmod@divisor,f
  1732  05A3  1903               	skipnz
  1733  05A4  0AF1               	incf	___awmod@divisor+1,f
  1734  05A5                     l1235:	
  1735  05A5  0870               	movf	___awmod@divisor,w
  1736  05A6  0471               	iorwf	___awmod@divisor+1,w
  1737  05A7  1903               	btfsc	3,2
  1738  05A8  2DAA               	goto	u731
  1739  05A9  2DAB               	goto	u730
  1740  05AA                     u731:	
  1741  05AA  2DDA               	goto	l1253
  1742  05AB                     u730:	
  1743  05AB                     l1237:	
  1744  05AB  01F5               	clrf	___awmod@counter
  1745  05AC  0AF5               	incf	___awmod@counter,f
  1746  05AD  2DB9               	goto	l1243
  1747  05AE                     l1239:	
  1748  05AE  3001               	movlw	1
  1749  05AF                     u745:	
  1750  05AF  1003               	clrc
  1751  05B0  0DF0               	rlf	___awmod@divisor,f
  1752  05B1  0DF1               	rlf	___awmod@divisor+1,f
  1753  05B2  3EFF               	addlw	-1
  1754  05B3  1D03               	skipz
  1755  05B4  2DAF               	goto	u745
  1756  05B5                     l1241:	
  1757  05B5  3001               	movlw	1
  1758  05B6  00F4               	movwf	??___awmod
  1759  05B7  0874               	movf	??___awmod,w
  1760  05B8  07F5               	addwf	___awmod@counter,f
  1761  05B9                     l1243:	
  1762  05B9  1FF1               	btfss	___awmod@divisor+1,7
  1763  05BA  2DBC               	goto	u751
  1764  05BB  2DBD               	goto	u750
  1765  05BC                     u751:	
  1766  05BC  2DAE               	goto	l1239
  1767  05BD                     u750:	
  1768  05BD                     l1245:	
  1769  05BD  0871               	movf	___awmod@divisor+1,w
  1770  05BE  0273               	subwf	___awmod@dividend+1,w
  1771  05BF  1D03               	skipz
  1772  05C0  2DC3               	goto	u765
  1773  05C1  0870               	movf	___awmod@divisor,w
  1774  05C2  0272               	subwf	___awmod@dividend,w
  1775  05C3                     u765:	
  1776  05C3  1C03               	skipc
  1777  05C4  2DC6               	goto	u761
  1778  05C5  2DC7               	goto	u760
  1779  05C6                     u761:	
  1780  05C6  2DCD               	goto	l1249
  1781  05C7                     u760:	
  1782  05C7                     l1247:	
  1783  05C7  0870               	movf	___awmod@divisor,w
  1784  05C8  02F2               	subwf	___awmod@dividend,f
  1785  05C9  0871               	movf	___awmod@divisor+1,w
  1786  05CA  1C03               	skipc
  1787  05CB  03F3               	decf	___awmod@dividend+1,f
  1788  05CC  02F3               	subwf	___awmod@dividend+1,f
  1789  05CD                     l1249:	
  1790  05CD  3001               	movlw	1
  1791  05CE                     u775:	
  1792  05CE  1003               	clrc
  1793  05CF  0CF1               	rrf	___awmod@divisor+1,f
  1794  05D0  0CF0               	rrf	___awmod@divisor,f
  1795  05D1  3EFF               	addlw	-1
  1796  05D2  1D03               	skipz
  1797  05D3  2DCE               	goto	u775
  1798  05D4                     l1251:	
  1799  05D4  3001               	movlw	1
  1800  05D5  02F5               	subwf	___awmod@counter,f
  1801  05D6  1D03               	btfss	3,2
  1802  05D7  2DD9               	goto	u781
  1803  05D8  2DDA               	goto	u780
  1804  05D9                     u781:	
  1805  05D9  2DBD               	goto	l1245
  1806  05DA                     u780:	
  1807  05DA                     l1253:	
  1808  05DA  0876               	movf	___awmod@sign,w
  1809  05DB  1903               	btfsc	3,2
  1810  05DC  2DDE               	goto	u791
  1811  05DD  2DDF               	goto	u790
  1812  05DE                     u791:	
  1813  05DE  2DE4               	goto	l1257
  1814  05DF                     u790:	
  1815  05DF                     l1255:	
  1816  05DF  09F2               	comf	___awmod@dividend,f
  1817  05E0  09F3               	comf	___awmod@dividend+1,f
  1818  05E1  0AF2               	incf	___awmod@dividend,f
  1819  05E2  1903               	skipnz
  1820  05E3  0AF3               	incf	___awmod@dividend+1,f
  1821  05E4                     l1257:	
  1822  05E4  0873               	movf	___awmod@dividend+1,w
  1823  05E5  00F1               	movwf	?___awmod+1
  1824  05E6  0872               	movf	___awmod@dividend,w
  1825  05E7  00F0               	movwf	?___awmod
  1826  05E8                     l397:	
  1827  05E8  0008               	return
  1828  05E9                     __end_of___awmod:	
  1829                           
  1830                           	psect	text8
  1831  05E9                     __ptext8:	
  1832 ;; *************** function ___awdiv *****************
  1833 ;; Defined at:
  1834 ;;		line 5 in file "D:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awdiv.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  divisor         2    0[COMMON] int 
  1837 ;;  dividend        2    2[COMMON] int 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  quotient        2    7[COMMON] int 
  1840 ;;  sign            1    6[COMMON] unsigned char 
  1841 ;;  counter         1    5[COMMON] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  2    0[COMMON] int 
  1844 ;; Registers used:
  1845 ;;		wreg, status,2, status,0
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1851 ;;      Params:         4       0       0       0       0
  1852 ;;      Locals:         4       0       0       0       0
  1853 ;;      Temps:          1       0       0       0       0
  1854 ;;      Totals:         9       0       0       0       0
  1855 ;;Total ram usage:        9 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           
  1865                           ;psect for function ___awdiv
  1866  05E9                     ___awdiv:	
  1867  05E9                     l1179:	
  1868                           ;incstack = 0
  1869                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1870                           
  1871  05E9  01F6               	clrf	___awdiv@sign
  1872  05EA                     l1181:	
  1873  05EA  1FF1               	btfss	___awdiv@divisor+1,7
  1874  05EB  2DED               	goto	u611
  1875  05EC  2DEE               	goto	u610
  1876  05ED                     u611:	
  1877  05ED  2DF5               	goto	l1187
  1878  05EE                     u610:	
  1879  05EE                     l1183:	
  1880  05EE  09F0               	comf	___awdiv@divisor,f
  1881  05EF  09F1               	comf	___awdiv@divisor+1,f
  1882  05F0  0AF0               	incf	___awdiv@divisor,f
  1883  05F1  1903               	skipnz
  1884  05F2  0AF1               	incf	___awdiv@divisor+1,f
  1885  05F3                     l1185:	
  1886  05F3  01F6               	clrf	___awdiv@sign
  1887  05F4  0AF6               	incf	___awdiv@sign,f
  1888  05F5                     l1187:	
  1889  05F5  1FF3               	btfss	___awdiv@dividend+1,7
  1890  05F6  2DF8               	goto	u621
  1891  05F7  2DF9               	goto	u620
  1892  05F8                     u621:	
  1893  05F8  2E02               	goto	l1193
  1894  05F9                     u620:	
  1895  05F9                     l1189:	
  1896  05F9  09F2               	comf	___awdiv@dividend,f
  1897  05FA  09F3               	comf	___awdiv@dividend+1,f
  1898  05FB  0AF2               	incf	___awdiv@dividend,f
  1899  05FC  1903               	skipnz
  1900  05FD  0AF3               	incf	___awdiv@dividend+1,f
  1901  05FE                     l1191:	
  1902  05FE  3001               	movlw	1
  1903  05FF  00F4               	movwf	??___awdiv
  1904  0600  0874               	movf	??___awdiv,w
  1905  0601  06F6               	xorwf	___awdiv@sign,f
  1906  0602                     l1193:	
  1907  0602  01F7               	clrf	___awdiv@quotient
  1908  0603  01F8               	clrf	___awdiv@quotient+1
  1909  0604                     l1195:	
  1910  0604  0870               	movf	___awdiv@divisor,w
  1911  0605  0471               	iorwf	___awdiv@divisor+1,w
  1912  0606  1903               	btfsc	3,2
  1913  0607  2E09               	goto	u631
  1914  0608  2E0A               	goto	u630
  1915  0609                     u631:	
  1916  0609  2E41               	goto	l1215
  1917  060A                     u630:	
  1918  060A                     l1197:	
  1919  060A  01F5               	clrf	___awdiv@counter
  1920  060B  0AF5               	incf	___awdiv@counter,f
  1921  060C  2E18               	goto	l1203
  1922  060D                     l1199:	
  1923  060D  3001               	movlw	1
  1924  060E                     u645:	
  1925  060E  1003               	clrc
  1926  060F  0DF0               	rlf	___awdiv@divisor,f
  1927  0610  0DF1               	rlf	___awdiv@divisor+1,f
  1928  0611  3EFF               	addlw	-1
  1929  0612  1D03               	skipz
  1930  0613  2E0E               	goto	u645
  1931  0614                     l1201:	
  1932  0614  3001               	movlw	1
  1933  0615  00F4               	movwf	??___awdiv
  1934  0616  0874               	movf	??___awdiv,w
  1935  0617  07F5               	addwf	___awdiv@counter,f
  1936  0618                     l1203:	
  1937  0618  1FF1               	btfss	___awdiv@divisor+1,7
  1938  0619  2E1B               	goto	u651
  1939  061A  2E1C               	goto	u650
  1940  061B                     u651:	
  1941  061B  2E0D               	goto	l1199
  1942  061C                     u650:	
  1943  061C                     l1205:	
  1944  061C  3001               	movlw	1
  1945  061D                     u665:	
  1946  061D  1003               	clrc
  1947  061E  0DF7               	rlf	___awdiv@quotient,f
  1948  061F  0DF8               	rlf	___awdiv@quotient+1,f
  1949  0620  3EFF               	addlw	-1
  1950  0621  1D03               	skipz
  1951  0622  2E1D               	goto	u665
  1952  0623  0871               	movf	___awdiv@divisor+1,w
  1953  0624  0273               	subwf	___awdiv@dividend+1,w
  1954  0625  1D03               	skipz
  1955  0626  2E29               	goto	u675
  1956  0627  0870               	movf	___awdiv@divisor,w
  1957  0628  0272               	subwf	___awdiv@dividend,w
  1958  0629                     u675:	
  1959  0629  1C03               	skipc
  1960  062A  2E2C               	goto	u671
  1961  062B  2E2D               	goto	u670
  1962  062C                     u671:	
  1963  062C  2E34               	goto	l1211
  1964  062D                     u670:	
  1965  062D                     l1207:	
  1966  062D  0870               	movf	___awdiv@divisor,w
  1967  062E  02F2               	subwf	___awdiv@dividend,f
  1968  062F  0871               	movf	___awdiv@divisor+1,w
  1969  0630  1C03               	skipc
  1970  0631  03F3               	decf	___awdiv@dividend+1,f
  1971  0632  02F3               	subwf	___awdiv@dividend+1,f
  1972  0633                     l1209:	
  1973  0633  1477               	bsf	___awdiv@quotient,0
  1974  0634                     l1211:	
  1975  0634  3001               	movlw	1
  1976  0635                     u685:	
  1977  0635  1003               	clrc
  1978  0636  0CF1               	rrf	___awdiv@divisor+1,f
  1979  0637  0CF0               	rrf	___awdiv@divisor,f
  1980  0638  3EFF               	addlw	-1
  1981  0639  1D03               	skipz
  1982  063A  2E35               	goto	u685
  1983  063B                     l1213:	
  1984  063B  3001               	movlw	1
  1985  063C  02F5               	subwf	___awdiv@counter,f
  1986  063D  1D03               	btfss	3,2
  1987  063E  2E40               	goto	u691
  1988  063F  2E41               	goto	u690
  1989  0640                     u691:	
  1990  0640  2E1C               	goto	l1205
  1991  0641                     u690:	
  1992  0641                     l1215:	
  1993  0641  0876               	movf	___awdiv@sign,w
  1994  0642  1903               	btfsc	3,2
  1995  0643  2E45               	goto	u701
  1996  0644  2E46               	goto	u700
  1997  0645                     u701:	
  1998  0645  2E4B               	goto	l1219
  1999  0646                     u700:	
  2000  0646                     l1217:	
  2001  0646  09F7               	comf	___awdiv@quotient,f
  2002  0647  09F8               	comf	___awdiv@quotient+1,f
  2003  0648  0AF7               	incf	___awdiv@quotient,f
  2004  0649  1903               	skipnz
  2005  064A  0AF8               	incf	___awdiv@quotient+1,f
  2006  064B                     l1219:	
  2007  064B  0878               	movf	___awdiv@quotient+1,w
  2008  064C  00F1               	movwf	?___awdiv+1
  2009  064D  0877               	movf	___awdiv@quotient,w
  2010  064E  00F0               	movwf	?___awdiv
  2011  064F                     l384:	
  2012  064F  0008               	return
  2013  0650                     __end_of___awdiv:	
  2014                           
  2015                           	psect	text9
  2016  0435                     __ptext9:	
  2017 ;; *************** function _Start_Signal *****************
  2018 ;; Defined at:
  2019 ;;		line 43 in file "main.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2033 ;;      Params:         0       0       0       0       0
  2034 ;;      Locals:         0       0       0       0       0
  2035 ;;      Temps:          2       0       0       0       0
  2036 ;;      Totals:         2       0       0       0       0
  2037 ;;Total ram usage:        2 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; This function calls:
  2040 ;;		Nothing
  2041 ;; This function is called by:
  2042 ;;		_main
  2043 ;; This function uses a non-reentrant model
  2044 ;;
  2045                           
  2046                           
  2047                           ;psect for function _Start_Signal
  2048  0435                     _Start_Signal:	
  2049  0435                     l1083:	
  2050                           ;incstack = 0
  2051                           ; Regs used in _Start_Signal: [wreg]
  2052                           
  2053                           
  2054                           ;main.c: 44:   TRISA0 = 0;
  2055  0435  1683               	bsf	3,5	;RP0=1, select bank1
  2056  0436  1303               	bcf	3,6	;RP1=0, select bank1
  2057  0437  1005               	bcf	5,0	;volatile
  2058                           
  2059                           ;main.c: 45:   RA0 = 0;
  2060  0438  1283               	bcf	3,5	;RP0=0, select bank0
  2061  0439  1303               	bcf	3,6	;RP1=0, select bank0
  2062  043A  1005               	bcf	5,0	;volatile
  2063  043B                     l1085:	
  2064                           
  2065                           ;main.c: 47:   _delay((unsigned long)((25)*(4000000/4000.0)));
  2066  043B  3021               	movlw	33
  2067  043C  00F1               	movwf	??_Start_Signal+1
  2068  043D  3076               	movlw	118
  2069  043E  00F0               	movwf	??_Start_Signal
  2070  043F                     u957:	
  2071  043F  0BF0               	decfsz	??_Start_Signal,f
  2072  0440  2C3F               	goto	u957
  2073  0441  0BF1               	decfsz	??_Start_Signal+1,f
  2074  0442  2C3F               	goto	u957
  2075  0443  0000               	nop
  2076  0444                     l1087:	
  2077                           
  2078                           ;main.c: 48:   RA0 = 1;
  2079  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2080  0445  1303               	bcf	3,6	;RP1=0, select bank0
  2081  0446  1405               	bsf	5,0	;volatile
  2082                           
  2083                           ;main.c: 50:   _delay((unsigned long)((30)*(4000000/4000000.0)));
  2084  0447  3009               	movlw	9
  2085  0448  00F0               	movwf	??_Start_Signal
  2086  0449                     u967:	
  2087  0449  0BF0               	decfsz	??_Start_Signal,f
  2088  044A  2C49               	goto	u967
  2089  044B  2C4C               	nop2
  2090  044C                     l1089:	
  2091                           
  2092                           ;main.c: 51:   TRISA0 = 1;
  2093  044C  1683               	bsf	3,5	;RP0=1, select bank1
  2094  044D  1303               	bcf	3,6	;RP1=0, select bank1
  2095  044E  1405               	bsf	5,0	;volatile
  2096  044F                     l52:	
  2097  044F  0008               	return
  2098  0450                     __end_of_Start_Signal:	
  2099                           
  2100                           	psect	text10
  2101  0547                     __ptext10:	
  2102 ;; *************** function _Read_Data *****************
  2103 ;; Defined at:
  2104 ;;		line 81 in file "main.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  dht_data        1    wreg     PTR unsigned char 
  2107 ;;		 -> CheckSum(1), T_Byte2(1), T_Byte1(1), RH_Byte2(1), 
  2108 ;;		 -> RH_Byte1(1), 
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  dht_data        1    3[COMMON] PTR unsigned char 
  2111 ;;		 -> CheckSum(1), T_Byte2(1), T_Byte1(1), RH_Byte2(1), 
  2112 ;;		 -> RH_Byte1(1), 
  2113 ;;  i               1    2[COMMON] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;		None               void
  2116 ;; Registers used:
  2117 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         0       0       0       0       0
  2124 ;;      Locals:         2       0       0       0       0
  2125 ;;      Temps:          2       0       0       0       0
  2126 ;;      Totals:         4       0       0       0       0
  2127 ;;Total ram usage:        4 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_main
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           
  2137                           ;psect for function _Read_Data
  2138  0547                     _Read_Data:	
  2139                           
  2140                           ;incstack = 0
  2141                           ; Regs used in _Read_Data: [wreg-fsr0h+status,2+status,0]
  2142                           ;Read_Data@dht_data stored from wreg
  2143  0547  00F3               	movwf	Read_Data@dht_data
  2144  0548                     l1121:	
  2145                           
  2146                           ;main.c: 81: __bit Read_Data(unsigned char* dht_data);main.c: 82: {;main.c: 83:   *dht_d
      +                          ata = 0;
  2147  0548  0873               	movf	Read_Data@dht_data,w
  2148  0549  0084               	movwf	4
  2149  054A  1383               	bcf	3,7	;select IRP bank0
  2150  054B  0180               	clrf	0
  2151  054C                     l1123:	
  2152                           
  2153                           ;main.c: 85:   for(char i = 0; i < 8; i++)
  2154  054C  01F2               	clrf	Read_Data@i
  2155  054D                     l1129:	
  2156                           
  2157                           ;main.c: 86:   {;main.c: 87:     TMR1H = 0;
  2158  054D  1283               	bcf	3,5	;RP0=0, select bank0
  2159  054E  1303               	bcf	3,6	;RP1=0, select bank0
  2160  054F  018F               	clrf	15	;volatile
  2161                           
  2162                           ;main.c: 88:     TMR1L = 0;
  2163  0550  018E               	clrf	14	;volatile
  2164                           
  2165                           ;main.c: 90:     while(!RA0)
  2166  0551  2D5A               	goto	l74
  2167  0552                     l1131:	
  2168                           
  2169                           ;main.c: 91:       if(TMR1L > 100) {
  2170  0552  3065               	movlw	101
  2171  0553  020E               	subwf	14,w	;volatile
  2172  0554  1C03               	skipc
  2173  0555  2D57               	goto	u511
  2174  0556  2D58               	goto	u510
  2175  0557                     u511:	
  2176  0557  2D5A               	goto	l74
  2177  0558                     u510:	
  2178  0558                     l1133:	
  2179                           
  2180                           ;main.c: 92:         return 1;
  2181  0558  1403               	setc
  2182  0559  2D8F               	goto	l77
  2183  055A                     l74:	
  2184                           
  2185                           ;main.c: 90:     while(!RA0)
  2186  055A  1C05               	btfss	5,0	;volatile
  2187  055B  2D5D               	goto	u521
  2188  055C  2D5E               	goto	u520
  2189  055D                     u521:	
  2190  055D  2D52               	goto	l1131
  2191  055E                     u520:	
  2192  055E                     l1137:	
  2193                           
  2194                           ;main.c: 95:     TMR1H = 0;
  2195  055E  018F               	clrf	15	;volatile
  2196                           
  2197                           ;main.c: 96:     TMR1L = 0;
  2198  055F  018E               	clrf	14	;volatile
  2199                           
  2200                           ;main.c: 98:     while(RA0)
  2201  0560  2D68               	goto	l79
  2202  0561                     l1139:	
  2203                           
  2204                           ;main.c: 99:       if(TMR1L > 100) {
  2205  0561  3065               	movlw	101
  2206  0562  020E               	subwf	14,w	;volatile
  2207  0563  1C03               	skipc
  2208  0564  2D66               	goto	u531
  2209  0565  2D67               	goto	u530
  2210  0566                     u531:	
  2211  0566  2D68               	goto	l79
  2212  0567                     u530:	
  2213  0567  2D58               	goto	l1133
  2214  0568                     l79:	
  2215                           
  2216                           ;main.c: 98:     while(RA0)
  2217  0568  1805               	btfsc	5,0	;volatile
  2218  0569  2D6B               	goto	u541
  2219  056A  2D6C               	goto	u540
  2220  056B                     u541:	
  2221  056B  2D61               	goto	l1139
  2222  056C                     u540:	
  2223  056C                     l1145:	
  2224                           
  2225                           ;main.c: 103:      if(TMR1L > 50)
  2226  056C  3033               	movlw	51
  2227  056D  020E               	subwf	14,w	;volatile
  2228  056E  1C03               	skipc
  2229  056F  2D71               	goto	u551
  2230  0570  2D72               	goto	u550
  2231  0571                     u551:	
  2232  0571  2D84               	goto	l1149
  2233  0572                     u550:	
  2234  0572                     l1147:	
  2235                           
  2236                           ;main.c: 104:        *dht_data |= (1 << (7 - i));
  2237  0572  3001               	movlw	1
  2238  0573  00F0               	movwf	??_Read_Data
  2239  0574  0872               	movf	Read_Data@i,w
  2240  0575  3C07               	sublw	7
  2241  0576  3E01               	addlw	1
  2242  0577  2D7A               	goto	u564
  2243  0578                     u565:	
  2244  0578  1003               	clrc
  2245  0579  0DF0               	rlf	??_Read_Data,f
  2246  057A                     u564:	
  2247  057A  3EFF               	addlw	-1
  2248  057B  1D03               	skipz
  2249  057C  2D78               	goto	u565
  2250  057D  0870               	movf	??_Read_Data,w
  2251  057E  00F1               	movwf	??_Read_Data+1
  2252  057F  0873               	movf	Read_Data@dht_data,w
  2253  0580  0084               	movwf	4
  2254  0581  0871               	movf	??_Read_Data+1,w
  2255  0582  1383               	bcf	3,7	;select IRP bank0
  2256  0583  0480               	iorwf	0,f
  2257  0584                     l1149:	
  2258                           
  2259                           ;main.c: 105:   }
  2260  0584  3001               	movlw	1
  2261  0585  00F0               	movwf	??_Read_Data
  2262  0586  0870               	movf	??_Read_Data,w
  2263  0587  07F2               	addwf	Read_Data@i,f
  2264  0588                     l1151:	
  2265  0588  3008               	movlw	8
  2266  0589  0272               	subwf	Read_Data@i,w
  2267  058A  1C03               	skipc
  2268  058B  2D8D               	goto	u571
  2269  058C  2D8E               	goto	u570
  2270  058D                     u571:	
  2271  058D  2D4D               	goto	l1129
  2272  058E                     u570:	
  2273  058E                     l1153:	
  2274                           
  2275                           ;main.c: 107:   return 0;
  2276  058E  1003               	clrc
  2277  058F                     l77:	
  2278  058F  0008               	return
  2279  0590                     __end_of_Read_Data:	
  2280                           
  2281                           	psect	text11
  2282  0493                     __ptext11:	
  2283 ;; *************** function _Check_Response *****************
  2284 ;; Defined at:
  2285 ;;		line 55 in file "main.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;		None               void
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2299 ;;      Params:         0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0
  2302 ;;      Totals:         0       0       0       0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; This function calls:
  2306 ;;		Nothing
  2307 ;; This function is called by:
  2308 ;;		_main
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           
  2313                           ;psect for function _Check_Response
  2314  0493                     _Check_Response:	
  2315  0493                     l1091:	
  2316                           ;incstack = 0
  2317                           ; Regs used in _Check_Response: [wreg+status,2+status,0]
  2318                           
  2319                           
  2320                           ;main.c: 56:   TMR1H = 0;
  2321  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2322  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2323  0495  018F               	clrf	15	;volatile
  2324                           
  2325                           ;main.c: 57:   TMR1L = 0;
  2326  0496  018E               	clrf	14	;volatile
  2327  0497                     l1093:	
  2328                           
  2329                           ;main.c: 58:   TMR1ON = 1;
  2330  0497  1410               	bsf	16,0	;volatile
  2331  0498                     l55:	
  2332                           ;main.c: 60:   while(!RA0 && TMR1L < 100);
  2333                           
  2334  0498  1805               	btfsc	5,0	;volatile
  2335  0499  2C9B               	goto	u451
  2336  049A  2C9C               	goto	u450
  2337  049B                     u451:	
  2338  049B  2CA2               	goto	l1097
  2339  049C                     u450:	
  2340  049C                     l1095:	
  2341  049C  3064               	movlw	100
  2342  049D  020E               	subwf	14,w	;volatile
  2343  049E  1C03               	skipc
  2344  049F  2CA1               	goto	u461
  2345  04A0  2CA2               	goto	u460
  2346  04A1                     u461:	
  2347  04A1  2C98               	goto	l55
  2348  04A2                     u460:	
  2349  04A2                     l1097:	
  2350                           
  2351                           ;main.c: 62:   if(TMR1L > 99)
  2352  04A2  3064               	movlw	100
  2353  04A3  020E               	subwf	14,w	;volatile
  2354  04A4  1C03               	skipc
  2355  04A5  2CA7               	goto	u471
  2356  04A6  2CA8               	goto	u470
  2357  04A7                     u471:	
  2358  04A7  2CAA               	goto	l1105
  2359  04A8                     u470:	
  2360  04A8                     l1099:	
  2361                           
  2362                           ;main.c: 63:     return 0;
  2363  04A8  1003               	clrc
  2364  04A9  2CBE               	goto	l61
  2365  04AA                     l1105:	
  2366                           
  2367                           ;main.c: 66:   {;main.c: 67:     TMR1H = 0;
  2368  04AA  018F               	clrf	15	;volatile
  2369                           
  2370                           ;main.c: 68:     TMR1L = 0;
  2371  04AB  018E               	clrf	14	;volatile
  2372  04AC                     l63:	
  2373                           ;main.c: 70:     while(RA0 && TMR1L < 100);
  2374                           
  2375  04AC  1C05               	btfss	5,0	;volatile
  2376  04AD  2CAF               	goto	u481
  2377  04AE  2CB0               	goto	u480
  2378  04AF                     u481:	
  2379  04AF  2CB6               	goto	l1109
  2380  04B0                     u480:	
  2381  04B0                     l1107:	
  2382  04B0  3064               	movlw	100
  2383  04B1  020E               	subwf	14,w	;volatile
  2384  04B2  1C03               	skipc
  2385  04B3  2CB5               	goto	u491
  2386  04B4  2CB6               	goto	u490
  2387  04B5                     u491:	
  2388  04B5  2CAC               	goto	l63
  2389  04B6                     u490:	
  2390  04B6                     l1109:	
  2391                           
  2392                           ;main.c: 72:     if(TMR1L > 99)
  2393  04B6  3064               	movlw	100
  2394  04B7  020E               	subwf	14,w	;volatile
  2395  04B8  1C03               	skipc
  2396  04B9  2CBB               	goto	u501
  2397  04BA  2CBC               	goto	u500
  2398  04BB                     u501:	
  2399  04BB  2CBD               	goto	l1117
  2400  04BC                     u500:	
  2401  04BC  2CA8               	goto	l1099
  2402  04BD                     l1117:	
  2403                           
  2404                           ;main.c: 76:       return 1;
  2405  04BD  1403               	setc
  2406  04BE                     l61:	
  2407  04BE  0008               	return
  2408  04BF                     __end_of_Check_Response:	
  2409  007E                     btemp	set	126	;btemp
  2410  007E                     wtemp0	set	126


Data Sizes:
    Strings     59
    Constant    0
    Data        32
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     10      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcd_wstring@string	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[12]), STR_3(CODE[16]), STR_2(CODE[5]), 
		 -> Humidity(BANK0[16]), Temperature(BANK0[16]), STR_1(CODE[10]), 

    Read_Data@dht_data	PTR unsigned char  size(1) Largest target is 1
		 -> CheckSum(BANK0[1]), T_Byte2(COMMON[1]), T_Byte1(COMMON[1]), RH_Byte2(COMMON[1]), 
		 -> RH_Byte1(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_lcd_wstring
    _setup->_lcd_setup
    _lcd_setup->_lcd_command
    _lcd_wstring->_lcd_wchar
    _lcd_cursor->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    2995
                                              0 BANK0     10    10      0
                     _Check_Response
                          _Read_Data
                       _Start_Signal
                            ___awdiv
                            ___awmod
                         _lcd_cursor
                        _lcd_wstring
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      22
                          _lcd_setup
 ---------------------------------------------------------------------------------
 (2) _lcd_setup                                            2     2      0      22
                                              3 COMMON     2     2      0
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_wstring                                          7     5      2     644
                                              3 COMMON     7     5      2
                          _lcd_wchar
 ---------------------------------------------------------------------------------
 (2) _lcd_wchar                                            3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_cursor                                           4     3      1     544
                                              3 COMMON     4     3      1
                        _lcd_command
 ---------------------------------------------------------------------------------
 (3) _lcd_command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     600
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     908
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Start_Signal                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Read_Data                                            4     4      0     277
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Check_Response                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Check_Response
   _Read_Data
   _Start_Signal
   ___awdiv
   ___awmod
   _lcd_cursor
     _lcd_command
   _lcd_wstring
     _lcd_wchar
   _setup
     _lcd_setup
       _lcd_command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      30       5       60.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E      12        0.0%
ABS                  0      0      3E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Mar 12 18:30:12 2020

                       pc 0002               __CFG_CP$OFF 0000                        l52 044F  
                      l61 04BE                        l63 04AC                        l55 0498  
                      l49 03F8                        l74 055A                        l77 058F  
                      l79 0568                        _c1 004E                        _d1 004D  
            ___awdiv@sign 0076                        _u1 004C                        fsr 0004  
            ?_lcd_wstring 0073                       l121 0492                       l114 0434  
                     l142 0500                       l136 041F                       l145 0546  
                     l384 064F                       l397 05E8                       _RA0 0028  
                     u500 04BC                       u501 04BB                       u510 0558  
                     u511 0557                       u520 055E                       u600 0500  
                     u521 055D                       u601 04FF                       u450 049C  
                     u530 0567                       u610 05EE              __CFG_CPD$OFF 0000  
                     u451 049B                       u531 0566                       u611 05ED  
                     u460 04A2                       u540 056C                       u700 0646  
                     u620 05F9                       u461 04A1                       u541 056B  
                     u701 0645                       u621 05F8                       u470 04A8  
                     u550 0572                       u630 060A                       u710 0595  
                     u471 04A7                       u551 0571                       u631 0609  
                     u711 0594                       u480 04B0                       u720 05A0  
                     u800 066B                       u481 04AF                       u721 059F  
                     u801 066A                       u490 04B6                       u570 058E  
                     u650 061C                       u730 05AB                       u810 0675  
                     u491 04B5                       u571 058D                       u651 061B  
                     u731 05AA                       u811 0674                       u564 057A  
                     u580 04CC                       u820 067F                       u565 0578  
                     u645 060E                       u821 067E                       u670 062D  
                     u750 05BD                       u590 04EE                       u830 0689  
                     u671 062C                       u751 05BC                       u831 0688  
                     u760 05C7                       u840 0693                       u665 061D  
                     u761 05C6                       u745 05AF                       u841 0692  
                     u690 0641                       u850 069D                       u691 0640  
                     u675 0629                       u907 050E                       u851 069C  
                     u780 05DA                       u860 06DD                       u685 0635  
                     u781 05D9                       u765 05C3                       u917 051D  
                     u861 06DC                       u790 05DF                       u791 05DE  
                     u775 05CE                       u927 0529                       u937 0417  
                     u865 06D9                       u947 042C                       u957 043F  
                     u967 0449                       u897 07DA          ??_Check_Response 0070  
                     fsr0 0004                       indf 0000              ___awmod@sign 0076  
            __CFG_IESO$ON 0000               lcd_cursor@a 0076               lcd_cursor@b 0073  
            __CFG_LVP$OFF 0000              lcd_command@a 0072                      l1105 04AA  
                    l1121 0548                      l1201 0614                      l1107 04B0  
                    l1131 0552                      l1123 054C                      l1211 0634  
                    l1203 0618                      l1043 0421                      l1051 0501  
                    l1117 04BD                      l1109 04B6                      l1133 0558  
                    l1213 063B                      l1205 061C                      l1045 0425  
                    l1061 0527                      l1053 050A                      l1301 079F  
                    l1151 0588                      l1207 062D                      l1215 0641  
                    l1231 059C                      l1223 0590                      l1047 0427  
                    l1071 040D                      l1063 052E                      l1055 0513  
                    l1311 07D2                      l1303 07A9                      l1153 058E  
                    l1145 056C                      l1137 055E                      l1129 054D  
                    l1217 0646                      l1209 0633                      l1241 05B5  
                    l1233 05A0                      l1225 0591                      l1049 0431  
                    l1161 047A                      l1073 0410                      l1065 0534  
                    l1057 0519                      l1081 03F3                      l1305 07B5  
                    l1091 0493                      l1147 0572                      l1139 0561  
                    l1083 0435                      l1219 064B                      l1251 05D4  
                    l1243 05B9                      l1235 05A5                      l1227 0595  
                    l1075 0412                      l1171 04BF                      l1067 053A  
                    l1059 0521                      l1307 07BE                      l1093 0497  
                    l1149 0584                      l1085 043B                      l1181 05EA  
                    l1245 05BD                      l1237 05AB                      l1253 05DA  
                    l1229 059A                      l1165 0482                      l1157 0471  
                    l1077 041C                      l1173 04C2                      l1069 0540  
                    l1309 07CF                      l1261 0650                      l1095 049C  
                    l1087 0444                      l1191 05FE                      l1183 05EE  
                    l1255 05DF                      l1247 05C7                      l1239 05AE  
                    l1159 0472                      l1175 04DE                      l1271 0675  
                    l1263 0658                      l1097 04A2                      l1089 044C  
                    l1193 0602                      l1185 05F3                      l1257 05E4  
                    l1249 05CD                      l1177 04E4                      l1281 06A9  
                    l1273 067F                      l1265 065D                      l1099 04A8  
                    l1195 0604                      l1187 05F5                      l1179 05E9  
                    l1291 0773                      l1283 06B3                      l1275 0689  
                    l1267 0662                      l1197 060A                      l1189 05F9  
                    l1349 048A                      l1293 077C                      l1285 06DD  
                    l1277 0693                      l1269 066B                      l1199 060D  
                    l1295 0785                      l1287 0767                      l1279 069D  
                    l1297 078D                      l1289 076B                      l1299 0797  
                    STR_1 003F                      STR_2 0049                      STR_3 0013  
                    STR_4 0033                      STR_5 0023              __CFG_WRT$OFF 0000  
           __CFG_FCMEN$ON 0000                      _main 0650                Read_Data@i 0072  
                    btemp 007E                      start 0000                     ?_main 0070  
         __end_of___awdiv 0650             __CFG_WDTE$OFF 0000           __end_of___awmod 05E9  
                   _ANSEL 0188           ___awdiv@divisor 0070                     _T1CON 0010  
          __CFG_DEBUG$OFF 0000           ___awdiv@counter 0075                     _TMR1H 000F  
                   _TMR1L 000E                     _PORTB 0006                     _TRISB 0086  
                   _TRISD 0088                     _setup 03F3            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
          __CFG_MCLRE$OFF 0000           __initialization 07E4              __end_of_main 07E4  
            lcd_wstring@i 0078                    ??_main 0040          ___awdiv@dividend 0072  
           lcd_wchar@dato 0072                    ?_setup 0070                    _ANSELH 0189  
                  _TMR1ON 0080                    _TRISA0 0428        __size_of_Read_Data 0049  
          __CFG_PWRTE$OFF 0000      __size_of_lcd_command 0015                 ??___awdiv 0074  
               ??___awmod 0074          ___awdiv@quotient 0077           ___awmod@divisor 0070  
         ___awmod@counter 0075      __size_of_lcd_wstring 0042   __end_of__initialization 07FC  
          __pcstackCOMMON 0070              __pidataBANK0 0450             __end_of_setup 03F9  
       __end_of_Read_Data 0590        __size_of_lcd_wchar 0014        __size_of_lcd_setup 0046  
                 ??_setup 0075                __pbssBANK0 004A                __pmaintext 0650  
              _lcd_cursor 0470                __stringtab 0003                   _T_Byte1 007D  
                 _T_Byte2 007C         __end_of_lcd_wchar 0420         __end_of_lcd_setup 0547  
                 ___awdiv 05E9                   ___awmod 0590               _Temperature 0030  
                 __ptext1 03F3                   __ptext2 0501                   __ptext3 04BF  
                 __ptext4 040C                   __ptext5 0470                   __ptext6 0420  
                 __ptext7 0590                   __ptext8 05E9                   __ptext9 0435  
                 _humedad 004A          ___awmod@dividend 0072      end_of_initialization 07FC  
 __size_of_Check_Response 002C             ?_Start_Signal 0070                 _PORTDbits 0008  
             ?_lcd_cursor 0073             ??_lcd_command 0070            ??_Start_Signal 0070  
           ??_lcd_wstring 0075       start_initialization 07E4                 _Read_Data 0547  
__CFG_FOSC$INTRC_NOCLKOUT 0000       __size_of_lcd_cursor 0023                init_fetch0 03F9  
     __end_of_lcd_command 0435               __pdataBANK0 0020               __pbssCOMMON 007A  
               ___latbits 0002             __pcstackBANK0 0040                ?_Read_Data 0070  
     __end_of_lcd_wstring 0501            _Check_Response 0493                  ?___awdiv 0070  
                ?___awmod 0070         lcd_wstring@string 0073                 __pstrings 0003  
               _lcd_wchar 040C                 _lcd_setup 0501    __end_of_Check_Response 04BF  
          __size_of_setup 0006      __end_of_Start_Signal 0450               _lcd_command 0420  
               _resultado 004B                  _RH_Byte1 007B                  _RH_Byte2 007A  
              ?_lcd_wchar 0070                ?_lcd_setup 0070               __stringbase 0012  
             _lcd_wstring 04BF                  _CheckSum 004F              ??_lcd_cursor 0074  
             ??_Read_Data 0070           ?_Check_Response 0070                  _Humidity 0020  
      __end_of_lcd_cursor 0493          __size_of___awdiv 0067          __size_of___awmod 0059  
      __end_of__stringtab 0013                  __ptext10 0547                  __ptext11 0493  
       __CFG_BOR4V$BOR40V 0000             __size_of_main 0194               ??_lcd_wchar 0070  
             ??_lcd_setup 0073                  init_ram0 03FD     __size_of_Start_Signal 001B  
               stringcode 000D              _Start_Signal 0435         Read_Data@dht_data 0073  
                stringdir 000D                  stringtab 0003              ?_lcd_command 0070  
